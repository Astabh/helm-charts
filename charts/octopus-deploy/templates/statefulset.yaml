# Octopus Deploy server nodes are modeled as StatefulSet, as terminating a node while deployments or runbooks are executing will cause these tasks to be terminated
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: octopus-deploy
  # TODO: labels and annotations
spec:
  selector:
    matchLabels:
      app: octopus-deploy
  serviceName: "octopus-deploy"
  replicas: {{.Values.octopus.replicaCount}}
  template:
    metadata:
      labels:
        app: octopus-deploy
    spec:
      containers:
              - name: octopus
                image: {{.Values.octopus.image}}
                securityContext:
                  {{- if .Values.octopus.enableDockerInDocker }}
                  privileged: true
                  {{- end }}
                env:
                  - name: ACCEPT_EULA
                    value: !!str "{{.Values.octopus.acceptEula}}"
                  - name: OCTOPUS_SERVER_NODE_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: DB_CONNECTION_STRING
                    valueFrom:
                      secretKeyRef:
                        name: octopus-deploy-secrets
                        key: dbConnectionString
                  {{- if .Values.octopus.username }}
                  - name: ADMIN_USERNAME
                    valueFrom:
                      secretKeyRef:
                        name: octopus-deploy-secrets
                        key: adminUsername
                  {{- end}}
                  {{- if .Values.octopus.password }}
                  - name: ADMIN_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: octopus-deploy-secrets
                        key: adminPassword
                  {{- end}}
                  - name: ADMIN_EMAIL
                    value: {{.Values.octopus.email}}
                  {{- if .Values.octopus.licenseKeyBase64 }}
                  - name: OCTOPUS_SERVER_BASE64_LICENSE
                    # Your license key goes here. When using more than one node, a HA license is required.
                    # Without a HA license, the stateful set can have a replica count of 1.
                    valueFrom:
                      secretKeyRef:
                        name: octopus-deploy-secrets
                        key: licenseKey
                  {{- end}}
                  - name: MASTER_KEY
                    valueFrom:
                      secretKeyRef:
                        name: octopus-deploy-secrets
                        key: masterKey
                {{- if not .Values.octopus.enableDockerInDocker }}
                  - name: DISABLE_DIND
                    value: !!str "Y"
                {{- end }}
                ports:
                  - containerPort: 8080
                    name: web
                  - containerPort: 10943
                    name: tentacle
                readinessProbe:
                  exec:
                    command:
                      - /bin/bash
                      - -c
                      - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/serverstatus/hosted/internal --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 5
                  failureThreshold: 60
                livenessProbe:
                  exec:
                    command:
                      - /bin/bash
                      - -c
                      - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test "$response" -eq 418
                  periodSeconds: 30
                  timeoutSeconds: 5
                  failureThreshold: 10
                startupProbe:
                  exec:
                    command:
                      - /bin/bash
                      - -c
                      - URL=http://localhost:8080; response=$(/usr/bin/curl -k $URL/api/octopusservernodes/ping --write-out %{http_code} --silent --output /dev/null); /usr/bin/test "$response" -ge 200 && /usr/bin/test "$response" -le 299 || /usr/bin/test "$response" -eq 418
                  failureThreshold: 30
                  periodSeconds: 60
      affinity:
        # Try and keep Octopus nodes on separate Kubernetes nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - octopus-deploy
                topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 10
---
apiVersion: v1
kind: Secret
metadata:
  name: octopus-deploy-secrets
type: Opaque
data:
  {{- if .Values.octopus.username }}
  adminUsername: {{.Values.octopus.username | b64enc}}
  {{- end}}
  {{- if .Values.octopus.password }}
  adminPassword: {{.Values.octopus.password | b64enc}}
  {{- end}}
  {{- if .Values.octopus.licenseKeyBase64 }}
  licenseKey: {{.Values.octopus.licenseKeyBase64 | b64enc}}
  {{- end}}
  masterKey: {{.Values.octopus.masterKey | b64enc}}
  dbConnectionString: {{ tpl .Values.octopus.databaseConnectionString . | b64enc}}